import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from"react/jsx-runtime";import{describe,it,expect,beforeEach,vi}from"vitest";import{render,screen,cleanup,fireEvent}from"@testing-library/react";import{Router}from"./Router";import{Route}from"./Route";import{getCurrentPath}from"./utils";import{Link}from"./Link";vi.mock("./utils.js",()=>({getCurrentPath:vi.fn()}));describe("Router",()=>{beforeEach(()=>{cleanup();vi.clearAllMocks()});it("should render without problems",()=>{render(_jsx(Router,{routes:[]}));expect(true).toBeTruthy()});it("should render 404 if no routes match",()=>{render(_jsx(Router,{routes:[],defaultComponent:()=>_jsx("h1",{children:"404"})}));expect(screen.getByText("404")).toBeTruthy()});it("should render the component of the first route that matches",()=>{getCurrentPath.mockReturnValue("/about");const routes=[{path:"/",Component:()=>_jsx("h1",{children:"Home"})},{path:"/about",Component:()=>_jsx("h1",{children:"About"})}];render(_jsx(Router,{routes:routes}));expect(screen.getByText("About")).toBeTruthy()});it("should navigate using Links",async()=>{getCurrentPath.mockReturnValueOnce("/");render(_jsxs(Router,{children:[_jsx(Route,{path:"/",Component:()=>{return _jsxs(_Fragment,{children:[_jsx("h1",{children:"Home"}),_jsx(Link,{to:"/about",children:"Go to About"})]})}}),_jsx(Route,{path:"/about",Component:()=>_jsx("h1",{children:"About"})})]}));const anchor=screen.getByText(/Go to About/);fireEvent.click(anchor);const aboutTitle=await screen.findByText("About");expect(aboutTitle).toBeTruthy()})});